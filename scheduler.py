#!/usr/bin/env python3
"""
Job Scraper Scheduler
Sets up automated daily scraping runs using system scheduling or Python scheduling.
"""

import os
import sys
import platform
import subprocess
import argparse
from datetime import datetime, time

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scraper.utils.logger import setup_logger

logger = setup_logger("Scheduler")

def create_windows_task(script_path, times=["09:00", "21:00"]):
    """Create Windows scheduled tasks for automated scraping."""
    print("ü™ü Setting up Windows scheduled tasks...")
    
    task_name_base = "JobScraperDaily"
    
    for i, run_time in enumerate(times, 1):
        task_name = f"{task_name_base}_{i}"
        
        # Delete existing task if it exists
        try:
            subprocess.run([
                "schtasks", "/delete", "/tn", task_name, "/f"
            ], check=False, capture_output=True)
        except:
            pass
        
        # Create new task
        cmd = [
            "schtasks", "/create",
            "/tn", task_name,
            "/tr", f'python "{script_path}" --once',
            "/sc", "daily",
            "/st", run_time,
            "/ru", "SYSTEM"
        ]
        
        try:
            result = subprocess.run(cmd, check=True, capture_output=True, text=True)
            print(f"‚úÖ Created Windows task '{task_name}' for {run_time}")
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Failed to create task '{task_name}': {e}")
            print(f"   Command: {' '.join(cmd)}")
            if e.stderr:
                print(f"   Error: {e.stderr}")

def create_linux_cron(script_path, times=["09:00", "21:00"]):
    """Create Linux cron jobs for automated scraping."""
    print("üêß Setting up Linux cron jobs...")
    
    crontab_entries = []
    
    for run_time in times:
        hour, minute = run_time.split(":")
        # Format: minute hour * * * command
        cron_line = f"{minute} {hour} * * * cd {os.path.dirname(script_path)} && python {script_path} --once"
        crontab_entries.append(cron_line)
    
    # Create crontab file
    crontab_content = "\n".join([
        "# Job Scraper Automated Tasks",
        "# Generated by scheduler.py",
        ""
    ] + crontab_entries + [""])
    
    # Write to temporary file
    temp_cron_file = "/tmp/job_scraper_cron.txt"
    with open(temp_cron_file, 'w') as f:
        f.write(crontab_content)
    
    try:
        # Install crontab
        subprocess.run(["crontab", temp_cron_file], check=True)
        print(f"‚úÖ Installed cron jobs:")
        for entry in crontab_entries:
            print(f"   {entry}")
        
        # Clean up temp file
        os.remove(temp_cron_file)
        
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to install cron jobs: {e}")
    except FileNotFoundError:
        print("‚ùå crontab command not found. Please install cron.")

def create_systemd_service(script_path):
    """Create systemd service and timer for automated scraping."""
    print("üîß Setting up systemd service and timer...")
    
    service_name = "job-scraper"
    
    # Service file content
    service_content = f"""[Unit]
Description=Job Scraper Service
After=network.target

[Service]
Type=oneshot
User=root
WorkingDirectory={os.path.dirname(script_path)}
ExecStart=/usr/bin/python3 {script_path} --once
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
"""

    # Timer file content (runs twice daily at 9 AM and 9 PM)
    timer_content = f"""[Unit]
Description=Job Scraper Timer
Requires={service_name}.service

[Timer]
OnCalendar=*-*-* 09:00:00
OnCalendar=*-*-* 21:00:00
Persistent=true

[Install]
WantedBy=timers.target
"""

    try:
        # Write service file
        service_file = f"/etc/systemd/system/{service_name}.service"
        with open(service_file, 'w') as f:
            f.write(service_content)
        print(f"‚úÖ Created service file: {service_file}")
        
        # Write timer file
        timer_file = f"/etc/systemd/system/{service_name}.timer"
        with open(timer_file, 'w') as f:
            f.write(timer_content)
        print(f"‚úÖ Created timer file: {timer_file}")
        
        # Reload systemd and enable timer
        subprocess.run(["systemctl", "daemon-reload"], check=True)
        subprocess.run(["systemctl", "enable", f"{service_name}.timer"], check=True)
        subprocess.run(["systemctl", "start", f"{service_name}.timer"], check=True)
        
        print(f"‚úÖ Enabled and started systemd timer")
        
        # Show timer status
        result = subprocess.run(
            ["systemctl", "list-timers", f"{service_name}.timer"],
            capture_output=True, text=True
        )
        if result.returncode == 0:
            print("üìÖ Timer status:")
            print(result.stdout)
            
    except PermissionError:
        print("‚ùå Permission denied. Run with sudo to create systemd services.")
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Failed to setup systemd service: {e}")
    except FileNotFoundError:
        print("‚ùå systemctl command not found. systemd not available.")

def setup_python_scheduler(script_path, times=["09:00", "21:00"]):
    """Create a Python-based scheduler script."""
    print("üêç Setting up Python-based scheduler...")
    
    scheduler_script = os.path.join(os.path.dirname(script_path), "scheduler_daemon.py")
    
    scheduler_content = f'''#!/usr/bin/env python3
"""
Job Scraper Python Scheduler Daemon
Runs scraping jobs at scheduled times using Python scheduling.
"""

import schedule
import time
import subprocess
import sys
import os
from datetime import datetime

# Add parent directory to path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from scraper.utils.logger import setup_logger

logger = setup_logger("SchedulerDaemon")

SCRIPT_PATH = "{script_path}"

def run_scraping_job():
    """Run the scraping job."""
    try:
        logger.info("Starting scheduled scraping job")
        result = subprocess.run([
            sys.executable, SCRIPT_PATH, "--once"
        ], capture_output=True, text=True, timeout=3600)  # 1 hour timeout
        
        if result.returncode == 0:
            logger.info("Scheduled scraping job completed successfully")
            if result.stdout:
                logger.info(f"Output: {{result.stdout}}")
        else:
            logger.error(f"Scheduled scraping job failed: {{result.stderr}}")
            
    except subprocess.TimeoutExpired:
        logger.error("Scheduled scraping job timed out after 1 hour")
    except Exception as e:
        logger.error(f"Error running scheduled scraping job: {{e}}")

def main():
    """Main scheduler loop."""
    logger.info("Starting Job Scraper Python Scheduler")
    logger.info(f"Scheduled times: {times}")
    
    # Schedule jobs
'''
    
    for run_time in times:
        scheduler_content += f'''    schedule.every().day.at("{run_time}").do(run_scraping_job)\n'''
    
    scheduler_content += '''
    logger.info("Scheduler started. Press Ctrl+C to stop.")
    
    try:
        while True:
            schedule.run_pending()
            time.sleep(60)  # Check every minute
    except KeyboardInterrupt:
        logger.info("Scheduler stopped by user")

if __name__ == "__main__":
    main()
'''

    # Write scheduler script
    try:
        with open(scheduler_script, 'w') as f:
            f.write(scheduler_content)
        
        # Make executable
        os.chmod(scheduler_script, 0o755)
        
        print(f"‚úÖ Created Python scheduler: {scheduler_script}")
        print(f"üìÖ Scheduled times: {', '.join(times)}")
        print(f"üöÄ To start: python {scheduler_script}")
        print(f"üí° To run as service, use systemd, supervisor, or pm2")
        
        return scheduler_script
        
    except Exception as e:
        print(f"‚ùå Failed to create Python scheduler: {e}")
        return None

def show_current_schedule():
    """Show current scheduled tasks."""
    system = platform.system().lower()
    
    print("üìÖ Current scheduled tasks:")
    print("="*50)
    
    if system == "windows":
        try:
            result = subprocess.run([
                "schtasks", "/query", "/fo", "table", "/tn", "JobScraperDaily*"
            ], capture_output=True, text=True)
            
            if result.returncode == 0:
                print(result.stdout)
            else:
                print("No Windows scheduled tasks found")
                
        except FileNotFoundError:
            print("schtasks command not found")
            
    elif system == "linux":
        try:
            result = subprocess.run(["crontab", "-l"], capture_output=True, text=True)
            
            if result.returncode == 0:
                lines = result.stdout.split('\n')
                scraper_lines = [line for line in lines if 'job' in line.lower() and 'scraper' in line.lower()]
                
                if scraper_lines:
                    for line in scraper_lines:
                        print(line)
                else:
                    print("No job scraper cron jobs found")
            else:
                print("No crontab entries found")
                
        except FileNotFoundError:
            print("crontab command not found")
        
        # Check systemd timers
        try:
            result = subprocess.run([
                "systemctl", "list-timers", "job-scraper*"
            ], capture_output=True, text=True)
            
            if result.returncode == 0 and "job-scraper" in result.stdout:
                print("\\nSystemd timers:")
                print(result.stdout)
                
        except FileNotFoundError:
            pass
    
    print("="*50)

def remove_schedule():
    """Remove existing scheduled tasks."""
    system = platform.system().lower()
    
    print("üóëÔ∏è  Removing existing schedules...")
    
    if system == "windows":
        # Remove Windows scheduled tasks
        try:
            for i in range(1, 5):  # Check first 4 possible tasks
                task_name = f"JobScraperDaily_{i}"
                result = subprocess.run([
                    "schtasks", "/delete", "/tn", task_name, "/f"
                ], capture_output=True)
                
                if result.returncode == 0:
                    print(f"‚úÖ Removed Windows task: {task_name}")
                    
        except FileNotFoundError:
            print("schtasks command not found")
            
    elif system == "linux":
        # Remove cron jobs
        try:
            result = subprocess.run(["crontab", "-l"], capture_output=True, text=True)
            
            if result.returncode == 0:
                lines = result.stdout.split('\\n')
                # Filter out job scraper lines
                filtered_lines = [
                    line for line in lines 
                    if not ('job' in line.lower() and 'scraper' in line.lower())
                ]
                
                # Write back filtered crontab
                temp_cron = "/tmp/filtered_cron.txt"
                with open(temp_cron, 'w') as f:
                    f.write('\\n'.join(filtered_lines))
                
                subprocess.run(["crontab", temp_cron], check=True)
                os.remove(temp_cron)
                print("‚úÖ Removed cron jobs")
                
        except (FileNotFoundError, subprocess.CalledProcessError):
            pass
        
        # Remove systemd service
        try:
            subprocess.run(["systemctl", "stop", "job-scraper.timer"], check=False)
            subprocess.run(["systemctl", "disable", "job-scraper.timer"], check=False)
            
            for file_path in ["/etc/systemd/system/job-scraper.service", 
                            "/etc/systemd/system/job-scraper.timer"]:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"‚úÖ Removed: {file_path}")
            
            subprocess.run(["systemctl", "daemon-reload"], check=False)
            
        except (PermissionError, FileNotFoundError):
            pass

def main():
    parser = argparse.ArgumentParser(description='Job Scraper Scheduler Setup')
    parser.add_argument('--setup', action='store_true', 
                       help='Setup automated scheduling')
    parser.add_argument('--remove', action='store_true',
                       help='Remove existing schedules')
    parser.add_argument('--show', action='store_true',
                       help='Show current schedules')
    parser.add_argument('--times', nargs='+', default=["09:00", "21:00"],
                       help='Schedule times (default: 09:00 21:00)')
    parser.add_argument('--method', choices=['auto', 'cron', 'systemd', 'windows', 'python'],
                       default='auto', help='Scheduling method')
    
    args = parser.parse_args()
    
    if not any([args.setup, args.remove, args.show]):
        parser.print_help()
        return
    
    script_path = os.path.join(os.path.dirname(__file__), "enhanced_cli.py")
    if not os.path.exists(script_path):
        script_path = os.path.join(os.path.dirname(__file__), "cli.py")
    
    if not os.path.exists(script_path):
        print(f"‚ùå Scraper script not found: {script_path}")
        return
    
    if args.remove:
        remove_schedule()
    
    if args.show:
        show_current_schedule()
    
    if args.setup:
        system = platform.system().lower()
        method = args.method
        
        if method == 'auto':
            if system == 'windows':
                method = 'windows'
            elif system == 'linux':
                # Prefer systemd if available, fall back to cron
                try:
                    subprocess.run(["systemctl", "--version"], 
                                 check=True, capture_output=True)
                    method = 'systemd'
                except (FileNotFoundError, subprocess.CalledProcessError):
                    method = 'cron'
            else:
                method = 'python'
        
        print(f"üîß Setting up automated scheduling...")
        print(f"   System: {system}")
        print(f"   Method: {method}")
        print(f"   Times: {', '.join(args.times)}")
        print(f"   Script: {script_path}")
        print()
        
        if method == 'windows':
            create_windows_task(script_path, args.times)
        elif method == 'cron':
            create_linux_cron(script_path, args.times)
        elif method == 'systemd':
            create_systemd_service(script_path)
        elif method == 'python':
            scheduler_script = setup_python_scheduler(script_path, args.times)
            if scheduler_script:
                print(f"\\nüí° Next steps:")
                print(f"   1. Install schedule package: pip install schedule")
                print(f"   2. Run scheduler: python {scheduler_script}")
                print(f"   3. Keep it running with systemd, supervisor, or pm2")

if __name__ == "__main__":
    main()
